# diff -pu dwm.git/config.def.h dwm.programtags+hidewithvacanttags/config.def.h
# --- dwm/config.def.h	2021-02-27 20:04:32.030570909 -0600
# +++ dwm/config.def.h	2021-03-15 16:32:37.586956549 -0500
# @@ -21,6 +21,10 @@ static const char *colors[][3]      = {
#  /* tagging */
#  static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
 
# +static const char ptagf[] = "[%s %s]";	/* format of a tag label */
# +static const char etagf[] = "[%s]";	/* format of an empty tag */
# +static const int lcaselbl = 0;		/* 1 means make tag label lowercase */	
# +
#  static const Rule rules[] = {
#  	/* xprop(1):
#  	 *	WM_CLASS(STRING) = instance, class
--- dwm/dwm.c
+++ dwm/dwm.c
@@ -20,6 +20,7 @@
  *
  * To understand everything else, start reading main().
  */
+#include <ctype.h> /* for tolower function, very tiny standard library */
 #include <errno.h>
 #include <locale.h>
 #include <signal.h>
@@ -352,6 +353,8 @@
 	int showbars[LENGTH(tags) + 1]; /* display bar for the current tag */
 };
 
+unsigned int tagw[LENGTH(tags)];
+
 /* compile-time check if all tags fit into an unsigned int bit array. */
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
 
@@ -517,7 +520,7 @@
 void
 buttonpress(XEvent *e)
 {
-	unsigned int i, x, click;
+	unsigned int i, x, click, occ = 0;
 	Arg arg = {0};
 	Client *c;
 	Monitor *m;
@@ -532,9 +535,14 @@
 	}
 	if (ev->window == selmon->barwin) {
 		i = x = 0;
-		do
-			x += TEXTW(tags[i]);
-		while (ev->x >= x && ++i < LENGTH(tags));
+		for (c = m->clients; c; c = c->next)
+			occ |= c->tags == 255 ? 0 : c->tags;
+		do {
+			/* do not reserve space for vacant tags */
+			if (!(occ & 1 << i || m->tagset[m->seltags] & 1 << i))
+				continue;
+			x += tagw[i];
+		} while (ev->x >= x && ++i < LENGTH(tags));
 		if (i < LENGTH(tags)) {
 			click = ClkTagBar;
 			arg.ui = 1 << i;
@@ -887,6 +895,8 @@
 	int boxw = drw->fonts->h / 6 + 2;
 	unsigned int i, occ = 0, urg = 0;
 	Client *c;
+	char tagdisp[64];
+	char *masterclientontag[LENGTH(tags)];
 
 	if (!m->showbar)
 		return;
@@ -903,22 +913,45 @@
 
 	resizebarwin(m);
 
+	for (i = 0; i < LENGTH(tags); i++)
+		masterclientontag[i] = NULL;
+
 	for (c = m->clients; c; c = c->next) {
-		occ |= c->tags;
+		/* occ |= c->tags; */
+		occ |= c->tags == 255 ? 0 : c->tags;
 		if (c->isurgent)
 			urg |= c->tags;
+		for (i = 0; i < LENGTH(tags); i++)
+			if (!masterclientontag[i] && c->tags & (1<<i)) {
+				XClassHint ch = { NULL, NULL };
+				XGetClassHint(dpy, c->win, &ch);
+				masterclientontag[i] = ch.res_class;
+				if (lcaselbl)
+				masterclientontag[i][0] = tolower(masterclientontag[i][0]);
+			}
 	}
 	x = 0;
 	for (i = 0; i < LENGTH(tags); i++) {
 		w = TEXTW(tags[i]);
+		/* do not draw vacant tags */
+		if (!(occ & 1 << i || m->tagset[m->seltags] & 1 << i))
+		continue;
+
+		if (masterclientontag[i])
+			snprintf(tagdisp, 64, ptagf, tags[i], masterclientontag[i]);
+		else
+			snprintf(tagdisp, 64, etagf, tags[i]);
+		masterclientontag[i] = tagdisp;
+		tagw[i] = w = TEXTW(masterclientontag[i]);
 		drw_setscheme(drw, scheme[m->tagset[m->seltags] & 1 << i ? SchemeSel : SchemeNorm]);
-		drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], urg & 1 << i);
-		if (ulineall || m->tagset[m->seltags] & 1 << i) /* if there are conflicts, just move these lines directly underneath both 'drw_setscheme' and 'drw_text' :) */
-			drw_rect(drw, x + ulinepad, bh - ulinestroke - ulinevoffset, w - (ulinepad * 2), ulinestroke, 1, 0);
-		if (occ & 1 << i)
-			drw_rect(drw, x + boxs, boxs, boxw, boxw,
-				m == selmon && selmon->sel && selmon->sel->tags & 1 << i,
-				urg & 1 << i);
+		/* drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], urg & 1 << i); */
+		/* if (ulineall || m->tagset[m->seltags] & 1 << i) /1* if there are conflicts, just move these lines directly underneath both 'drw_setscheme' and 'drw_text' :) *1/ */
+		/* 	drw_rect(drw, x + ulinepad, bh - ulinestroke - ulinevoffset, w - (ulinepad * 2), ulinestroke, 1, 0); */
+		/* if (occ & 1 << i) */
+		/* 	drw_rect(drw, x + boxs, boxs, boxw, boxw, */
+		/* 		m == selmon && selmon->sel && selmon->sel->tags & 1 << i, */
+		/* 		urg & 1 << i); */
+		drw_text(drw, x, 0, w, bh, lrpad / 2, masterclientontag[i], urg & 1 << i);
 		x += w;
 	}
 	w = TEXTW(m->ltsymbol);
